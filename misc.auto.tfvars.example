owner = {
  name  = "demo"
  email = "demo@lexisnexisrisk.com"
}

metadata = {
  project             = "hpccplatform"
  product_name        = "hpccplatform"
  business_unit       = "commercial"
  environment         = "sandbox"
  market              = "us"
  product_group       = "hpcc"
  resource_group_type = "app"
  sre_team            = "hpccplatform"
  subscription_type   = "dev"
  additional_tags     = { "justification" = "testing", "enclosed resource" = "hpcc" }
  location            = "eastus" # Acceptable values: eastus, centralus
}

# # disable_naming_conventions - Disable naming conventions
# # disable_naming_conventions = true 

# # auto_launch_svc - Automatically launch ECLWatch web interface.
auto_launch_svc = {
  eclwatch = true
}

# azure_auth = {
#   #   AAD_CLIENT_ID     = ""
#   #   AAD_CLIENT_SECRET = ""
#   #   AAD_TENANT_ID     = ""
#   #   AAD_PRINCIPAL_ID  = ""
#   SUBSCRIPTION_ID = ""
# }

# hpcc_container = {
#   version = "9.2.0"
#   image_name    = "platform-core-ln"
#   image_root    = "jfrog.com/glb-docker-virtual"
#   #   custom_chart_version = "9.2.0-rc1"
#   #   custom_image_version = "9.2.0-demo"
# }

# hpcc_container_registry_auth = {
#   username = "value"
#   password = "value"
# }

internal_domain = "" // Example: hpccplatform-dev.azure.com

# external = {
#   blob_nfs = [{
#     container_id         = ""
#     container_name       = ""
#     id                   = ""
#     resource_group_name  = ""
#     storage_account_id   = ""
#     storage_account_name = ""
#   }]
#   hpcc = [{
#     name = ""
#     planes = list(object({
#       local  = ""
#       remote = ""
#     }))
#     service = ""
#   }]
# }

admin_services_storage_account_settings = {
  replication_type = "ZRS" #LRS only if using HPC Cache
  #   authorized_ip_ranges = {
  #     "default" = "0.0.0.0/0" //must be public IP
  #   }

  delete_protection = false
}

azure_log_analytics_creds = {
  scope     = null
  object_id = "" //AAD_PRINCIPAL_ID
}

hpcc_namespace = {
  # existing_namespace = ""
  labels = {
    name = "hpcc"
  }
  create_namespace = true
}

data_storage_config = {
  internal = {
    blob_nfs = {
      data_plane_count = 2
      storage_account_settings = {
        replication_type  = "ZRS"
        delete_protection = false
      }
    }
  }
  external = null
}


ignore_external_storage     = false

spill_volumes = {
  spill = {
    name          = "spill"
    size          = 300
    prefix        = "/var/lib/HPCCSystems/spill"
    host_path     = "/mnt"
    storage_class = "spill"
    access_mode   = "ReadWriteOnce"
  }
}

spray_service_settings = {
  replicas     = 6
  nodeSelector = "spraypool" #"spraypool"
}

# ldap = {
#   ldap_server = "" //Server IP
#   dali = {
#     hpcc_admin_password = ""
#     hpcc_admin_username = ""
#     ldap_admin_password = ""
#     ldap_admin_username = ""
#     adminGroupName      = "HPCC-Admins"
#     filesBasedn         = "ou=files,ou=eclHPCCSysUser,dc=z0lpf,dc=onmicrosoft,dc=com"
#     groupsBasedn        = "OU=AADDC Users,dc=z0lpf,dc=onmicrosoft,dc=com"
#     resourcesBasedn     = "ou=smc,ou=espservices,ou=eclHPCCSysUser,dc=z0lpf,dc=onmicrosoft,dc=com"
#     systemBasedn        = "OU=AADDC Users,dc=z0lpf,dc=onmicrosoft,dc=com"
#     usersBasedn         = "OU=AADDC Users,dc=z0lpf,dc=onmicrosoft,dc=com"
#     workunitsBasedn     = "ou=workunits,ou=eclHPCCSysUser,dc=z0lpf,dc=onmicrosoft,dc=com"
#   }
#   esp = {
#     hpcc_admin_password = ""
#     hpcc_admin_username = ""
#     ldap_admin_password = ""
#     ldap_admin_username = ""
#     adminGroupName      = "HPCC-Admins"
#     filesBasedn         = "ou=files,ou=eclHPCCSysUser,dc=z0lpf,dc=onmicrosoft,dc=com"
#     groupsBasedn        = "OU=AADDC Users,dc=z0lpf,dc=onmicrosoft,dc=com"
#     resourcesBasedn     = "ou=smc,ou=espservices,ou=eclHPCCSysUser,dc=z0lpf,dc=onmicrosoft,dc=com"
#     systemBasedn        = "OU=AADDC Users,dc=z0lpf,dc=onmicrosoft,dc=com"
#     usersBasedn         = "OU=AADDC Users,dc=z0lpf,dc=onmicrosoft,dc=com"
#     workunitsBasedn     = "ou=workunits,ou=eclHPCCSysUser,dc=z0lpf,dc=onmicrosoft,dc=com"
#   }
# }
